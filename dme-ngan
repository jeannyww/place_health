#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
@author: nganle
"""

## Load & Clean Data
import pandas as pd
import numpy as np
#!pip install siuba 
from siuba import * 
# from plotnine import *  #ggplot
import os
import sys

# https://empowerprogram.hhs.gov/about-empowermap.html
# emPOWER Data

empower2018_county=pd.read_excel("https://empowerprogram.hhs.gov/2022_HHSemPOWERMapHistoricalDataset.xlsx", sheet_name="County")
empower2019_county=pd.read_excel("https://empowerprogram.hhs.gov/2019_HHSemPOWERMapHistoricalDataset.xlsx", sheet_name="County")
empower2020_county=pd.read_excel("https://empowerprogram.hhs.gov/2022_HHSemPOWERMapHistoricalDataset.xlsx", sheet_name="County")
empower2021_county=pd.read_excel("https://empowerprogram.hhs.gov/2021_HHSemPOWERMapHistoricalDataset.xlsx", sheet_name="County")
empower2022_county=pd.read_excel("https://empowerprogram.hhs.gov/2022_HHSemPOWERMapHistoricalDataset.xlsx", sheet_name="County")
empower_nc = empower2022_county>>filter(_, _.State.str.contains("NC"))

#Sniffer Function
import requests
import csv
def read_csv_sniffer(file_path):
    with open(file_path) as csvfile:
        dialect = csv.Sniffer().sniff(csvfile.read(14734))
        
    df = pd.read_csv(file_path, engine='python', dialect=dialect, on_bad_lines='skip')
    
    return df

# TOX PI SCORES 
# https://github.com/ToxPi/toxpiR/tree/main
# https://github.com/wachiuphd/CVI

# Baseline CVI
cvi_bl = read_csv_sniffer('CVI-county-pct-comb-baseline.csv')
cvi_bl.columns= cvi_bl.columns.str.replace('[. ]', "_", regex=True)
cvi_blnc=(cvi_bl>>filter(_.Name.str.contains("NC"))
>>rename(CVI_baseline_score=_.ToxPi_Score))

# Climate Change CVI
cvi_cc= read_csv_sniffer("CVI-county-pct-comb-climate.csv")
cvi_cc.columns= cvi_cc.columns.str.replace('[. ]', '_', regex=True)
cvi_ccnc = (cvi_cc>>filter(_.Name.str.contains("NC"))
>>rename(CVI_CC_score=_.ToxPi_Score))

# Extreme Events CVI 
cvi_extreme_events=read_csv_sniffer("CVI-county-pct-cat-CC-Extreme Events.csv")
cvi_extreme_events.columns= cvi_extreme_events.columns.str.replace('[. ]', '_', regex=True)
cvi_nc_ee = (cvi_extreme_events>>filter(_.Name.str.contains("NC")))
cvi_nc_ee = (cvi_nc_ee >> rename( 
        CC_EE_Score=_.ToxPi_Score,
        CC_EE_Temperature=_.Temperature,
        CC_EE_Droughts=_.Droughts,
        CC_EE_Wildfires=_.Wildfires,
        CC_EE_Precipitation=_.Precipitation,
        CC_EE_Flooding=_.Flooding,
        CC_EE_Storms=_.Storms))
print(cvi_nc_ee.columns)

# Overall CVI 
cvi_all = read_csv_sniffer("CVI-county-pct-comb.csv")
cvi_all.columns= cvi_all.columns.str.replace('[. ]', '_', regex=True)
cvi_allnc = (cvi_all>>filter(_.Name.str.contains("NC")) 
            >>rename(CVI_overall_score=_.ToxPi_Score))

#Appending CVI columns
nc_2022=(empower2022_county
        >>filter(_.State.str.contains("NC"))
        >>left_join(_, cvi_allnc,{"FIPS_Code":"FIPS"} )
        >>left_join(_, cvi_blnc[['FIPS', 'CVI_baseline_score']],on="FIPS" )
        >>left_join(_, cvi_ccnc[['FIPS', 'CVI_CC_score']],on="FIPS" )
        >>left_join(_, cvi_nc_ee[['FIPS', 'CC_EE_Score', 'CC_EE_Temperature', 'CC_EE_Droughts', 'CC_EE_Wildfires', 'CC_EE_Precipitation', 'CC_EE_Flooding', 'CC_EE_Storms']],on="FIPS")
        )
print(nc_2022.shape)
nc_2022.head()
nc_2022.dtypes

# Appending Other Indicators
cvi_inds=read_csv_sniffer("CVI-county_data_pct.csv")
cvi_inds.columns= cvi_inds.columns.str.replace('[. ]', '', regex=True)
cvi_inds.columns= cvi_inds.columns.str.replace('[()-,%-]', '', regex=True)
print(cvi_inds.columns)

# Appending Average # of Medicare Beneficiaries and Medicare Beneficiaries with DME, respectively, across 12 months
nc_2022=(empower2022_county
        >>filter(_.State.str.contains("NC"))
        >>left_join(_, cvi_allnc,{"FIPS_Code":"FIPS"} )
        >>left_join(_, cvi_blnc[['FIPS', 'CVI_baseline_score']],on="FIPS" )
        >>left_join(_, cvi_ccnc[['FIPS', 'CVI_CC_score']],on="FIPS" )
        >>left_join(_, cvi_nc_ee[['FIPS', 'CC_EE_Score', 'CC_EE_Temperature', 'CC_EE_Droughts', 'CC_EE_Wildfires', 'CC_EE_Precipitation', 'CC_EE_Flooding', 'CC_EE_Storms']],on="FIPS")
        >>mutate(Medicare_Benes_2022=_.filter(regex='Medicare_Benes$', axis=1).mean(axis=1), 
                Medicare_Benes_DME=_.filter(regex='Power_Dependent_Devices_DME$', axis=1).mean(axis=1), 
                Medicare_DME_per100=100*_.Medicare_Benes_DME/_.Medicare_Benes_2022)
        >>left_join(_, cvi_inds, on="FIPS")
        )
for col in nc_2022.columns:
    print(col)

print(head(nc_2022))

for col in nc_2022.columns:
    print(col)
    
# Export nc_2022 to an Excel file
nc_2022.to_excel("CVI_Empower_NC2022.xlsx", index=False)

# DATA VISUALS & ANALYSIS FOR ICPE 
# Libraries 
from plotnine import *

def topn(indat, n, colname):
    indat=indat.sort_values(by=[colname], ascending=False).head(n)
    p=(ggplot(indat, aes(x=f'reorder(County, -{colname})', y=colname))
            + geom_bar(stat="identity")
            + theme(axis_text_x=element_text(angle=45, hjust=1))
            )
    return(p)

topn(nc_2022, 10, "CVI_overall_score")
topn(nc_2022, 10, "LowIncome")
topn(nc_2022, 10, "CVI_baseline_score")

topn(nc_2022, 10, "Baseline_Health")
topn(nc_2022, 10, "Baseline_SocialEconomic")
topn(nc_2022, 10, "Baseline_Infrastructure")

topn(nc_2022, 10, "CVI_CC_score")
topn(nc_2022, 10, "ClimateChange_Health")
topn(nc_2022, 10, "ClimateChange_SocialEconomic")
topn(nc_2022, 10, "ClimateChange_ExtremeEvents")

topn(nc_2022, 10, "Medicare_DME_per100")
topn(nc_2022, 10, "ResidentialEnergyExpenditureschange")

## RANK CORRELATIONS
# Libraries
import scipy.stats

#Spearman Correlation
scipy.stats.spearmanr(nc_2022['CVI_overall_score'], nc_2022['Medicare_DME_per100'])
scipy.stats.spearmanr(nc_2022['ResidentialEnergyExpenditureschange'], nc_2022['Medicare_DME_per100'])
scipy.stats.spearmanr(nc_2022['CVI_overall_score'], nc_2022['Baseline_Health'])
scipy.stats.spearmanr(nc_2022['CVI_overall_score'], nc_2022['Baseline_SocialEconomic'])
scipy.stats.spearmanr(nc_2022['CVI_overall_score'], nc_2022['Baseline_Infrastructure'])
scipy.stats.spearmanr(nc_2022['CVI_overall_score'], nc_2022['LowIncome'])
scipy.stats.spearmanr(nc_2022['CC_EE_Score'], nc_2022['Medicare_DME_per100'])
scipy.stats.spearmanr(nc_2022['MethaneEmissions'], nc_2022['Medicare_DME_per100'])


## Top 10 County & Associated variables/indicators
(nc_2022
>>arrange(-_.CVI_overall_score)
>>head(10)
>>select(_.County, _.CVI_overall_score, _.Medicare_DME_per100, _.ResidentialEnergyExpenditureschange, _.Baseline_Health, _.Baseline_SocialEconomic, _.Baseline_Infrastructure, _.LowIncome)
)


#More Analysis

topn(nc_2022,3,'CVI_overall_score')

nc_2022['CVI_DME']= nc_2022["CVI_overall_score"] +nc_2022["Medicare_DME_per100"]/100
print(nc_2022['CVI_DME'])

topn(nc_2022, 3, "CVI_DME")
topn(nc_2022, 3, "Medicare_DME_per100")

print(nc_2022['Medicare_DME_per100'].describe())

scipy.stats.spearmanr(nc_2022['CC_EE_Score'], nc_2022['Medicare_DME_per100'])
scipy.stats.spearmanr(nc_2022['CC_EE_Storms'], nc_2022['Medicare_DME_per100'])
#scipy.stats.spearmanr(nc_2022['CC_EE_Wildfires'], nc_2022['Medicare_DME_per100'])
scipy.stats.spearmanr(nc_2022['CC_EE_Temperature'], nc_2022['Medicare_DME_per100'])
scipy.stats.spearmanr(nc_2022['CC_EE_Droughts'], nc_2022['Medicare_DME_per100'])
scipy.stats.spearmanr(nc_2022['CC_EE_Precipitation'], nc_2022['Medicare_DME_per100'])
scipy.stats.spearmanr(nc_2022['CC_EE_Flooding'], nc_2022['Medicare_DME_per100'])
scipy.stats.spearmanr(nc_2022['HurricaneAnnualizedFrequency'], nc_2022['Medicare_DME_per100'])
#scipy.stats.spearmanr(nc_2022['TornadoAnnualizedFrequency'], nc_2022['Medicare_DME_per100'])
scipy.stats.spearmanr(nc_2022['WinterWeatherAnnualizedFrequency'], nc_2022['Medicare_DME_per100'])
scipy.stats.spearmanr(nc_2022['CoastalFloodingAnnualizedFrequency'], nc_2022['Medicare_DME_per100'])
#scipy.stats.spearmanr(nc_2022['RiverineFloodingAnnualizedFrequency'], nc_2022['Medicare_DME_per100'])
scipy.stats.spearmanr(nc_2022['SeaLevelRise'], nc_2022['Medicare_DME_per100'])
scipy.stats.spearmanr(nc_2022['ColdWaveAnnualizedFrequency'], nc_2022['Medicare_DME_per100'])
#scipy.stats.spearmanr(nc_2022['Dayswithmaximumtemperatureabove35C'], nc_2022['Medicare_DME_per100'])
scipy.stats.spearmanr(nc_2022['Dayswithmaximumtemperatureabove40C'], nc_2022['Medicare_DME_per100'])
scipy.stats.spearmanr(nc_2022['FrostDays'], nc_2022['Medicare_DME_per100'])
scipy.stats.spearmanr(nc_2022['Maximumofmaximumtemperatures'], nc_2022['Medicare_DME_per100'])
#scipy.stats.spearmanr(nc_2022['UrbanHeatIslandExtremeHeatDays'], nc_2022['Medicare_DME_per100'])
scipy.stats.spearmanr(nc_2022['DroughtAnnualizedFrequency'], nc_2022['Medicare_DME_per100'])
scipy.stats.spearmanr(nc_2022['WildfireAnnualizedFrequency'], nc_2022['Medicare_DME_per100'])
scipy.stats.spearmanr(nc_2022['ConsecutiveDryDays'], nc_2022['Medicare_DME_per100'])
scipy.stats.spearmanr(nc_2022['SurfacePM25'], nc_2022['Medicare_DME_per100'])
scipy.stats.spearmanr(nc_2022['Snowfall'], nc_2022['Medicare_DME_per100'])
scipy.stats.spearmanr(nc_2022['StandardizedPrecipIndex'], nc_2022['Medicare_DME_per100'])
#scipy.stats.spearmanr(nc_2022['Floodingrisktoroads'], nc_2022['Medicare_DME_per100'])
###scipy.stats.spearmanr(nc_2022['Deathsfromclimatedisasters'], nc_2022['Medicare_DME_per100'], nan_policy='omit')
scipy.stats.spearmanr(nc_2022['Floodingrisktoproperties'], nc_2022['Medicare_DME_per100'])
scipy.stats.spearmanr(nc_2022['Wildfirerisktoproperties'], nc_2022['Medicare_DME_per100'])
###scipy.stats.spearmanr(nc_2022['Stateenergyrelatedcarbondioxideemissionsbyyear'], nc_2022['Medicare_DME_per100'])
#scipy.stats.spearmanr(nc_2022['MethaneEmissions'], nc_2022['Medicare_DME_per100'])

#Multivariate Linear Regression
import statsmodels.api as sm

identification_data = nc_2022['County']
print(identification_data)
non_numeric_columns = nc_2022.select_dtypes(exclude=['number'])
print(non_numeric_columns.columns)
nc_2022_dropna = nc_2022.dropna()

X = sm.add_constant(nc_2022.drop(columns=['Medicare_DME_per100','County','State','Name_x', 'Source_x', 'Name_y', 'Source_y',]))
model = sm.OLS(nc_2022['Medicare_DME_per100'], X).fit()
print(model.summary())
print(model.tvalues)
print(model.pvalues)
