---
title: CVI and EMPOWER in North Carolina
author: Jeanny Wang
date: 12-01-2024
format:  
    html:
        code-overflow: wrap
        code-tools: true
        code-fold: true
jupyter: python3
---

# CVI and EMPOWER in North Carolina

## Cleaning data for analysis  âœ¨
```{python}
#Loading the data 

import pandas as pd
import numpy as np
from siuba import * 
# from plotnine import *  #ggplot
import os
import sys

# https://empowerprogram.hhs.gov/about-empowermap.html
# loading in county data for 2019 through 2021 for empower 
empower2018_county=pd.read_excel("./EMPOWERdat/2018_HHSemPOWERMapHistoricalDataset.xlsx", sheet_name="County")
empower2019_county=pd.read_excel("./EMPOWERdat/2019_HHSemPOWERMapHistoricalDataset.xlsx", sheet_name="County") 
empower2020_county=pd.read_excel("./EMPOWERdat/2020_HHSemPOWERMapHistoricalDataset.xlsx", sheet_name="County")
empower2021_county=pd.read_excel("./EMPOWERdat/2021_HHSemPOWERMapHistoricalDataset.xlsx", sheet_name="County")
empower2022_county=pd.read_excel("./EMPOWERdat/2022_HHSemPOWERMapHistoricalDataset.xlsx", sheet_name="County")
empower_nc = empower2022_county>>filter(_, _.State.str.contains("NC"))

# TOX PI SCORES 
# https://github.com/ToxPi/toxpiR/tree/main
# https://github.com/wachiuphd/CVI
# Getting the baseline combined 
cvi_bl= pd.read_csv("./CVI/CVI-county-pct/CVI-county-pct-comb-baseline.csv")
cvi_bl.columns= cvi_bl.columns.str.replace('[. ]', "_", regex=True)
cvi_blnc=(cvi_bl>>filter(_.Name.str.contains("NC"))
>>rename(CVI_baseline_score=_.ToxPi_Score))

# Getting Climate combined 
cvi_cc= pd.read_csv( "./CVI/CVI-county-pct/CVI-county-pct-comb-climate.csv")
cvi_cc.columns= cvi_cc.columns.str.replace('[. ]', '_', regex=True)
cvi_ccnc = (cvi_cc>>filter(_.Name.str.contains("NC"))
>>rename(CVI_CC_score=_.ToxPi_Score))
# CVI for just the extreme events 
cvi_extreme_events=pd.read_csv("./CVI/CVI-county-pct/CVI-county-pct-cat-CC-Extreme Events.csv")
cvi_extreme_events.columns= cvi_extreme_events.columns.str.replace('[. ]', '_', regex=True)
cvi_nc_ee = (cvi_extreme_events>>filter(_.Name.str.contains("NC")))
cvi_nc_ee = (cvi_nc_ee >> rename( 
        CC_EE_Score=_.ToxPi_Score,
        CC_EE_Temperature=_.Temperature,
        CC_EE_Droughts=_.Droughts,
        CC_EE_Wildfires=_.Wildfires,
        CC_EE_Precipitation=_.Precipitation,
        CC_EE_Flooding=_.Flooding,
        CC_EE_Storms=_.Storms))
print(cvi_nc_ee.columns)

# Overall CVI for everything combined 
cvi_all = pd.read_csv("./CVI/CVI-county-pct/CVI-county-pct-comb.csv")
cvi_all.columns= cvi_all.columns.str.replace('[. ]', '_', regex=True)
cvi_allnc = (cvi_all>>filter(_.Name.str.contains("NC")) 
            >>rename(CVI_overall_score=_.ToxPi_Score))

# Merging datasets into one for analysis 
nc_2022=(empower2022_county
        >>filter(_.State.str.contains("NC"))
        >>left_join(_, cvi_allnc,{"FIPS_Code":"FIPS"} )
        >>left_join(_, cvi_blnc[['FIPS', 'CVI_baseline_score']],on="FIPS" )
        >>left_join(_, cvi_ccnc[['FIPS', 'CVI_CC_score']],on="FIPS" )
        >>left_join(_, cvi_nc_ee[['FIPS', 'CC_EE_Score', 'CC_EE_Temperature', 'CC_EE_Droughts', 'CC_EE_Wildfires', 'CC_EE_Precipitation', 'CC_EE_Flooding', 'CC_EE_Storms']],on="FIPS")
        )
print(nc_2022.shape)
nc_2022.head()
nc_2022.dtypes
# Loading in additional indicators
cvi_inds=pd.read_csv("./CVI/CVI-county-pct/CVI-county_data_pct.csv")
cvi_inds.columns= cvi_inds.columns.str.replace('[. ]', '', regex=True)
cvi_inds.columns= cvi_inds.columns.str.replace('[()-,%-]', '', regex=True)
print(cvi_inds.columns)

# Creating new columns for the average accross 12 months for the number of Medicare Beneficiaries and the number of Medicare Beneficiaries with DME
nc_2022=(empower2022_county
        >>filter(_.State.str.contains("NC"))
        >>left_join(_, cvi_allnc,{"FIPS_Code":"FIPS"} )
        >>left_join(_, cvi_blnc[['FIPS', 'CVI_baseline_score']],on="FIPS" )
        >>left_join(_, cvi_ccnc[['FIPS', 'CVI_CC_score']],on="FIPS" )
        >>left_join(_, cvi_nc_ee[['FIPS', 'CC_EE_Score', 'CC_EE_Temperature', 'CC_EE_Droughts', 'CC_EE_Wildfires', 'CC_EE_Precipitation', 'CC_EE_Flooding', 'CC_EE_Storms']],on="FIPS")
        >>mutate(Medicare_Benes_2022=_.filter(regex='Medicare_Benes$', axis=1).mean(axis=1), 
                Medicare_Benes_DME=_.filter(regex='Power_Dependent_Devices_DME$', axis=1).mean(axis=1), 
                Medicare_DME_per100=100*_.Medicare_Benes_DME/_.Medicare_Benes_2022)
        >>left_join(_, cvi_inds, on="FIPS")
        )
for col in nc_2022.columns:
    print(col)

print(head(nc_2022))

for col in nc_2022.columns:
    print(col)
# Export nc_2022 to an Excel file
nc_2022.to_excel("CVI_Empower_NC2022.xlsx", index=False)

```
## Data visualization and rudimentary analysis for ICPE abstract 
```{python}
# Libraries 
from plotnine import *

def topn(indat, n, colname):
    indat=indat.sort_values(by=[colname], ascending=False).head(n)
    p=(ggplot(indat, aes(x=f'reorder(County, -{colname})', y=colname))
            + geom_bar(stat="identity")
            + theme(axis_text_x=element_text(angle=45, hjust=1))
            )
    return(p)

topn(nc_2022, 10, "CVI_overall_score")
# topn(nc_2022, 10, "Low_Income")
topn(nc_2022, 10, "CVI_baseline_score")

topn(nc_2022, 10, "Baseline_Health")
topn(nc_2022, 10, "Baseline_SocialEconomic")
topn(nc_2022, 10, "Baseline_Infrastructure")

topn(nc_2022, 10, "CVI_CC_score")
topn(nc_2022, 10, "ClimateChange_Health")
topn(nc_2022, 10, "ClimateChange_SocialEconomic")
topn(nc_2022, 10, "ClimateChange_ExtremeEvents")

topn(nc_2022, 10, "Medicare_DME_per100")
topn(nc_2022, 10, "ResidentialEnergyExpenditureschange")


```

## Running Rank Correlations
```{python}

# Libraries
import numpy as np
import scipy.stats

scipy.stats.spearmanr(nc_2022['CVI_overall_score'], nc_2022['Medicare_DME_per100'])
scipy.stats.spearmanr(nc_2022['CVI_CC_score'], nc_2022['Medicare_DME_per100'])
scipy.stats.spearmanr(nc_2022['CC_EE_Storms'], nc_2022['Medicare_DME_per100'])
scipy.stats.spearmanr(nc_2022['CC_EE_Precipitation'], nc_2022['Medicare_DME_per100'])
scipy.stats.spearmanr(nc_2022['CC_EE_Flooding'], nc_2022['Medicare_DME_per100'])
scipy.stats.spearmanr(nc_2022['ResidentialEnergyExpenditureschange'], nc_2022['Medicare_DME_per100'])
scipy.stats.spearmanr(nc_2022['CVI_overall_score'], nc_2022['Baseline_Health'])
scipy.stats.spearmanr(nc_2022['CVI_overall_score'], nc_2022['Baseline_SocialEconomic'])
scipy.stats.spearmanr(nc_2022['CVI_overall_score'], nc_2022['Baseline_Infrastructure'])
scipy.stats.spearmanr(nc_2022['CVI_overall_score'], nc_2022['Low_Income'])


```

## Printing out top 10 county and associated variables/indicators

```{python}

(nc_2022
>>arrange(-_.CVI_overall_score)
>>head(10)
>>select(_.County, _.CVI_overall_score, _.Medicare_DME_per100, _.ResidentialEnergyExpenditureschange, _.Baseline_Health, _.Baseline_SocialEconomic, _.Baseline_Infrastructure, _.LowIncome)
)
(nc_2022
>>arrange(_.CVI_overall_score)
>>head(10)
>>select(_.County, _.CVI_overall_score, _.Medicare_DME_per100, _.ResidentialEnergyExpenditureschange, _.Baseline_Health, _.Baseline_SocialEconomic, _.Baseline_Infrastructure, _.LowIncome)
)
```
## Temp and scraps--testing code and dummy codes 

```{python}

(nc_2022
>>ggplot(aes(x="CVI_overall_score", y="Medicare_DME_per100"))
+geom_point()
+labs(title="CVI and Medicare DME per 100 Medicare Beneficiaries in NC 2022", x="CVI Overall Score", y="Medicare DME per 100 Medicare Beneficiaries")
)

(nc_2022
>>arrange(-_.Medicare_DME_per100) >> head(25)>>ggplot(aes(x="County", y="Medicare_DME_per100"))
+geom_bar(stat="identity")
)

(nc_2022
>>arrange(-_.Medicare_DME_per100)  
>>head(10)  // Select the top 10 rows
>>ggplot(aes(x="County", y="Medicare_DME_per100"))
+geom_bar(stat="identity")
)


```

```{python}
from plotnine import *
(nc_2022
    >>arrange(-_.Medicare_DME_per100) 
    >>head(25)
    >>ggplot(aes(x='reorder(County, -Medicare_DME_per100)', y="Medicare_DME_per100"))
        +geom_bar(stat="identity")
        +theme(axis_text_x=element_text(angle=45, hjust=1))
)
(nc_2022
    >>arrange(-_.CVI_overall_score) 
    >>head(25)
    >>ggplot(aes(x='reorder(County, -CVI_overall_score)', y="CVI_overall_score"))
        +geom_bar(stat="identity")
        +theme(axis_text_x=element_text(angle=45, hjust=1))
)


def top10(indat, colname, n):
    return (indat
            >> ggplot(aes(x=f'reorder(County, -{colname})', y=colname))
            + geom_bar(stat="identity")
            + theme(axis_text_x=element_text(angle=45, hjust=1))
            )

top10(nc_2022, "CVI_overall_score", 10)

def topn(indat, n, colname):
    indat=indat.sort_values(by=[colname], ascending=False).head(n)
    p=(ggplot(indat, aes(x=f'reorder(County, -{colname})', y=colname))
            + geom_bar(stat="identity")
            + theme(axis_text_x=element_text(angle=45, hjust=1))
            )
    return(p)

topn(nc_2022, 10, "CVI_overall_score")
topn(nc_2022, 10, "Medicare_DME_per100")




nc_2022['Medicare_DME_per100'].describe()


def top10(indat, colname, n):
    return (indat
                >>arrange({{colname}}) 
                >>head(n)
                >>ggplot(aes(x='reorder(County, -{{colname}})', y="{{colname}}"))
                    +geom_bar(stat="identity")
                    +theme(axis_text_x=element_text(angle=45, hjust=1)) 
            )

top10(nc_2022, _.Medicare_DME_per100, 10)


    return (indat
            >> arrange(order(_.{{colname}}))
            >> head(n)
            >> ggplot(aes(x="County", y=colname))
            + geom_bar(stat="identity")
            )
def top10(indat, colname, n):
    return (indat
            >> arrange(order(-_.{{colname}}))
            >> head(n)
            >> ggplot(aes(x="County", y=colname))
            + geom_bar(stat="identity")
            )
            
    return (indat
            >> arrange(order(_.{{colname}}))
            >> head(n)
            >> ggplot(aes(x="County", y=colname))
            + geom_bar(stat="identity")
            )

top10(nc_2022, "Medicare_DME_per100", 10)

    # return (indat
    # top10(nc_2022, "Medicare_DME_per100", 10, desc)
    # >>head(10)  // Select the top 10 rows
    # >>ggplot(aes(x="County", y="Medicare_DME_per100"))
    #     +geom_bar(stat="identity")
    #     )

```


```{python}

```
```{python}

```

### List of Variables 
FIPS_Code
County_FIPS_Code
County
State_FIPS_Code
State
January_2022_Medicare_Benes
January_2022_Power_Dependent_Devices_DME
February_2022_Medicare_Benes
February_2022_Power_Dependent_Devices_DME
March_2022_Medicare_Benes
March_2022_Power_Dependent_Devices_DME
April_2022_Medicare_Benes
April_2022_Power_Dependent_Devices_DME
May_2022_Medicare_Benes
May_2022_Power_Dependent_Devices_DME
June_2022_Medicare_Benes
June_2022_Power_Dependent_Devices_DME
July_2022_Medicare_Benes
July_2022_Power_Dependent_Devices_DME
August_2022_Medicare_Benes
August_2022_Power_Dependent_Devices_DME
September_2022_Medicare_Benes
September_2022_Power_Dependent_Devices_DME
October_2022_Medicare_Benes
October_2022_Power_Dependent_Devices_DME
November_2022_Medicare_Benes
November_2022_Power_Dependent_Devices_DME
December_2022_Medicare_Benes
December_2022_Power_Dependent_Devices_DME
row#_x
Name_x
FIPS
Source_x
CVI_overall_score
Baseline_Health
Baseline_SocialEconomic
Baseline_Infrastructure
Baseline_Environment
ClimateChange_Health
ClimateChange_SocialEconomic
ClimateChange_ExtremeEvents
CVI_baseline_score
CVI_CC_score
CC_EE_Score
CC_EE_Temperature
CC_EE_Droughts
CC_EE_Wildfires
CC_EE_Precipitation
CC_EE_Flooding
CC_EE_Storms
Medicare_Benes_2022
Medicare_Benes_DME
Medicare_DME_per100
row#_y
Name_y
Source_y
LifeExpectancy
SelfReportedPhysicalHealth
SelfReportedMentalHealth
DrugOverdoseDeathsper100000People
AlcoholAbuse
SuicideRates
CurrentDiabetes
CurrentAdultAsthma
Stroke
COPD
CHD
Cancer
HighBloodPressure
CholesterolScreening
RoutineDoctorVisit
Colonoscopy
Mammogram
OlderMenPreventiveScreening
OlderWomenPreventiveScreening
DentalExams
COVID19Deaths
HepatitisA
HepatitisB
HIV
Chlamydia
Gonorrhea
Syphilis
InfantMortality
Lowbirthweight
Pretermbirth
ChildhoodAsthma
Teenbirths
ADHDPrevalence
ADHDTreatment
ChildMortality
FreeorReducedPriceSchoolLunch
ProximitytoNursingHomes
NumberofHospitalBedsper10000people
Covid19VaccinationRates
MedicallyUnderservedAreas
CurrentLackofHealthInsurance
Proximitytohospitals
BelowPoverty
Unemployed
LowIncome
NoHighSchoolDiploma
HomicideRate
GunViolence
ReligiousOrganizations
CivicandSocialOrganizations
Aged65orOlder
Aged17orYounger
CivilianwithaDisability
SingleParentHouseholds
FosterChildren
Minority
SpeaksEnglishLessthanWell
UndocumentedPopulation
HateCrimes
PrisonPopulation
Redlining
HomelessPopulation
VeteransPopulation
MultiUnitStructures
MobileHomes
Crowding
NoVehicle
GroupQuarters
HousingForeclosureRisk
PercentofHousingUnitsBuiltBetween19401969asof20152019
Delaycongestionpercapita/censustract
Floodingrisktoroads
Lanemilespercapita
RoadQualityandMaintenance
PublicTransitPerformance
BridgeQualityandMaintenance
Walkability
Bikability
ResidentialEnergyCostBurden
Shareofenergyfromfossilfuels
EVChargingStations
ModifiedRetailFoodEnvironmentIndex
FoodInsecurity
AccesstoHealthyFoods
IndoorPlumbing
PercentofHouseholdwithnointernetaccess
Percentofhouseholdwithsmartphonebutnootherdevice
PercentofUnbankedHouseholds
Paydaylendingrank
HousingAffordabilityrenters
HousingAffordabilityowners
TaxBase:MedianRealEstateTaxesPaid
VoterTurnout2020
PublicLibraryLocations
HUDPublicHousing
AggregatefundingamountforHUDgrants
Totalvehiclemilestraveledpercapita
Passengervehiclemilestraveledpercapita
Truckvehiclemilestraveledpercapita
HeavyDutyVehiclevehiclemilestraveledpercapita
ProximitytoPorts
RailCrossings
TrafficProximityandVolume
NationalTransportationNoiseMap
RiskScreeningEnvironmentalIndicatorsRSEI
AirToxRespiratory
AirToxNeurological
AirToxLiver
AirToxDevelopmental
AirToxReproductive
AirToxKidney
AirToxImmunological
AirToxThyroid
AirToxTotalCancerRisk
BlackCarbon
Agriculturalpesticides
LeadPaint:housingunitsbuiltbefore1960
Leadindrinkingwaterviolations
SuperfundSites
Brownfields
StreamToxicityRiskScreeningEnvironmentalIndicatorsRSEI
Proximitytofacilitiesparticipatinginairmarkets
NPLsites
HazardousWasteManagementFacilitiesTSDFs
HazardousWasteGenerator/Incinerators
FacilitieswithEnforcementorViolation
Landfills
TSCAFacilities
RiskManagementPlanFacilities
ChemicalManufacturers
MetalRecyclers
ActiveOilandGasWells
AnnualaveragePM25concentrations
NO2concentration
Ozoneconcentration
ParksandGreenspace
ImpermeableSurfaces
ForestLandCover
NativeAmericanLands
Temperaturerelatedmortality
Deathsfromclimatedisasters
IncreasedPM25mortalityCVDages65
IncreasedOzonemortalityallages
Increaseinchildhoodasthmaincidence
Aedesalbopictusdenguetransmissionincrease
Aedesaegyptidenguetransmissionincrease
Aedesaegyptizikatransmissionincrease
FEMAHazardMitigationGrants
Floodingrisktoproperties
Wildfirerisktoproperties
Propertytaxesexpectedtobelostby2045duetochronicinundation
Costofclimatedisasters
HighRiskJobsProductivityChange
Yieldschange
Outdoorworkersworkdaysatriskperyear
ExpectedAnnualLossAgricultureValue
ExpectedAnnualLossBuildingValue
ExpectedAnnualLossPopulationEquivalence
ResidentialEnergyExpenditureschange
ShareofJobsinAgriculture
Stateenergyrelatedcarbondioxideemissionsbyyear
MethaneEmissions
PropertyCrimeschange
ViolentCrimeschange
ColdWaveAnnualizedFrequency
Dayswithmaximumtemperatureabove35C
Dayswithmaximumtemperatureabove40C
FrostDays
Maximumofmaximumtemperatures
Meantemperature
UrbanHeatIslandExtremeHeatDays
DroughtAnnualizedFrequency
ConsecutiveDryDays
WildfireAnnualizedFrequency
SurfacePM25
Snowfall
StandardizedPrecipIndex
TotalPrecipitation
CoastalFloodingAnnualizedFrequency
RiverineFloodingAnnualizedFrequency
SeaLevelRise
HurricaneAnnualizedFrequency
TornadoAnnualizedFrequency
WinterWeatherAnnualizedFrequency

